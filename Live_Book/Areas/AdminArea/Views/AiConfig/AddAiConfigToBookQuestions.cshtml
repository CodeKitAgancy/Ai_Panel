@using System.Text.Json;
@using Live_Book.Application.DTOs.AiConfig;
@model Live_Book.Application.DTOs.AiConfig.AddAiConfigToQuestionDto;
@{
	UpsertAiConfigDto aiConfig = ViewBag.AiConfig;
	string error = ViewBag.Error;
	var title = $"اضافه کردن تنظیمات {aiConfig.Title} به سوالات";
	ViewData["title"] = title;
}
<div class="row justify-content-md-center">
	<div class="col-md-12 col-lg-12 col-12">
		<div class="card shadow">
			<h5 class="card-header">
				@title
			</h5>
			<div class="card-body">
				<section class="card-text">
					<form id="FormInModal" method="Post" enctype="multipart/form-data" class="row">
						@Html.AntiForgeryToken()
						@if (!string.IsNullOrEmpty(error))
						{
							<p class="alert alert-danger">@error</p>
						}
						<div asp-validation-summary="ModelOnly" class="text-danger"></div>
						<input type="hidden" name="AiConfigId" asp-for="@Model.AiConfigId"/>
						<div class="col-md-6 col-sm-12 mb-1">
							<label class="">پایه</label>
							<select class="form-select custom-select" asp-items="ViewBag.BookGroup" id="bookGroupId" onchange="bookGroupChange()">
								<option disabled selected>لطفا موردی را انتخاب کنید</option>
							</select>
						</div>
						<div class="col-md-6 col-sm-12 mb-1">
							<label asp-for="@Model.BookIds">کتاب</label> :
							<select class="form-select custom-select js-example-basic-multiple" id="bookSelectBox" onchange="bookChange()" asp-for="@Model.BookIds" multiple>

							</select>
							<span class="text-danger" asp-validation-for="@Model.BookIds"></span>
						</div>
						<div class="col-md-6 col-sm-12 mb-1">
							<label asp-for="@Model.PartIds">فصل ها</label>:
							<select class="form-select js-example-basic-multiple" id="bookPartsSelectBox" onchange="partChange()" multiple asp-for="@Model.PartIds">
							</select>
							<span class="text-danger" asp-validation-for="@Model.PartIds"></span>
						</div>
						<div class="col-md-6 col-sm-12 mb-1">
							<label asp-for="@Model.QuestionIds">سوال ها</label> :	
							<select class="form-select custom-select js-example-basic-multiple" id="questionsSelectBox" multiple  asp-for="@Model.QuestionIds">
							</select>
							<span class="text-danger" asp-validation-for="@Model.QuestionIds"></span>
						</div>
						<div class="col-12 mt-3">
							<div class="">
								<button class="btn btn-primary d-block" type="submit">ثبت</button>
							</div>
						</div>
					</form>
				</section>
			</div>
		</div>
	</div>
</div>

@section Scripts
{
	<script type="text/javascript">
		const books = @Html.Raw(ViewBag.Books);
		const bookParts = @Html.Raw(ViewBag.BookParts);
		const questions = @Html.Raw(ViewBag.BookQuestions);
		const bookSelectBox = document.getElementById('bookSelectBox');
		const bookPartsSelectBox = document.getElementById('bookPartsSelectBox');
		const questionsSelectBox = document.getElementById('questionsSelectBox');

		function bookGroupChange() {
			var selectedBookGroup = Number($('#bookGroupId').val());
			const booksChildern = books.filter(item => item.GroupId === selectedBookGroup);
			let options = bookSelectBox.getElementsByTagName('option');
			for (var i = options.length; i--;) {
				bookSelectBox.removeChild(options[i]);
			}
			var selectedBook = 0;
			for (const element of booksChildern) {
				let newOption = new Option(`${element.Title}`, `${element.Id}`);
				selectedBook = element?.Selected ?? 0;
				if(element.Id == selectedBook){
					newOption.setAttribute("selected", "selected");
				}
				bookSelectBox.add(newOption, undefined);
			}
			bookChange();
			partChange();
		}
		function bookChange() {
			const selectedBooks = ($('#bookSelectBox').val() || []).map(Number);
			const bookPartsChildern = bookParts.filter(item => selectedBooks.includes(item.BookId));
			let options = bookPartsSelectBox.getElementsByTagName('option');
			for (var i = options.length; i--;) {
				bookPartsSelectBox.removeChild(options[i]);
			}
			if(selectedBooks.length > 1){ 
				partChange();	
				return;
			}
			var selectedPart = 0;
			for (const element of bookPartsChildern) {
				let newOption = new Option(`${element.Title}`, `${element.Id}`);
				selectedPart = element?.Selected ?? 0;
				if(element.Id == selectedPart){
					newOption.setAttribute("selected", "selected");
				}
				bookPartsSelectBox.add(newOption, undefined);
			}
			partChange();
		}
		function partChange() {
			console.log("sdjhd");
			const selectedParts = ($('#bookPartsSelectBox').val() || []).map(Number);
			const questionsChildren = questions.filter(item => selectedParts.includes(item.PartId));
			questionsSelectBox.innerHTML = '';
			if(selectedParts.length > 1){
				return;
			}
			if (questionsChildren.length > 0) {
				questionsChildren.forEach(x => {
					let questionType = x.IsMultipleChoice ? "تستی": "تشریحی";
					questionTitle = `سوال ${questionType} شماره ${toPersianDigits(x.Index)}`;
					const option = new Option(questionTitle, x.Id);
					if (x.Selected) option.selected = true;
					questionsSelectBox.add(option);
				});
			}
		}
	</script>
}